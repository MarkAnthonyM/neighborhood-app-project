{"version":3,"sources":["Components/NeighborhoodMap.js","App.js","Util/MapLoader.js","serviceWorker.js","index.js"],"names":["NeighborhoodMap","setInfoWindow","marker","infowindow","googleObject","_this","props","setContent","addListener","StreetViewService","getPanoramaByLocation","position","data","status","StreetViewStatus","OK","nearStreetView","location","latLng","heading","geometry","spherical","computeHeading","concat","title","formattedAddress","panoramaOptions","pov","pitch","StreetViewPanorama","document","getElementById","open","map","_this2","this","_this$props","loading","venues","console","log","Map","center","lat","lng","zoom","largeInfoWindow","InfoWindow","bounds","LatLngBounds","defaultIcon","forEach","venue","id","name","Marker","icon","animation","Animation","DROP","extend","setIcon","fitBounds","react_default","a","createElement","Component","App","state","mapPromise","Promise","resolve","reject","window","resolveGoogleMapsPromise","google","script","src","async","body","appendChild","markerPromise","apiRequest","fetch","then","response","json","catch","error","loadMarkerPlaces","all","maps","setState","className","Components_NeighborhoodMap","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.199fa5eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass NeighborhoodMap extends Component {\r\n  setInfoWindow = (marker, infowindow) => {\r\n    const { googleObject } = this.props\r\n    //Checks maker for already opened infowindow\r\n    if (infowindow.marker !== marker) {\r\n      //Clear infowindow to setup for streetview\r\n      infowindow.setContent('')\r\n      infowindow.marker = marker\r\n      infowindow.addListener('closeclick', () => {\r\n        infowindow.marker = null\r\n      })\r\n\r\n      let streetViewService = new this.props.googleObject.StreetViewService()\r\n      let radius = 50\r\n\r\n      function getStreetView(data, status) {\r\n        let panorama\r\n        if (status === googleObject.StreetViewStatus.OK) {\r\n          let nearStreetView = data.location.latLng\r\n          let heading = googleObject.geometry.spherical.computeHeading(\r\n            nearStreetView, marker.position\r\n          )\r\n          infowindow.setContent(\r\n            `\r\n            <div id='pano'></div>\r\n            <h2>Restuarant Name: ${marker.title}</h2>\r\n            <p>Address: ${marker.location.formattedAddress[0]}, ${marker.location.formattedAddress[1]}</p>\r\n            `\r\n          )\r\n          let panoramaOptions = {\r\n            position: nearStreetView,\r\n            pov: {\r\n              heading: heading,\r\n              pitch: 30\r\n            }\r\n          }\r\n          panorama = new googleObject.StreetViewPanorama(\r\n            document.getElementById('pano'), panoramaOptions\r\n          )\r\n        } else {\r\n          infowindow.setContent(`<div>${marker.title}<div><div>No Street View Found</div>`)\r\n        }\r\n      }\r\n\r\n      streetViewService.getPanoramaByLocation(marker.position, radius, getStreetView)\r\n\r\n      infowindow.open(this.map, marker)\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { loading, googleObject, venues } = this.props\r\n    //Checks state to see if promises have resolved\r\n    if (loading) {\r\n      console.log('content is still loading')\r\n    } else {\r\n      //loads google map api to class property\r\n      this.map = new googleObject.Map(document.getElementById('map'), {\r\n        center: {lat: 32.815747500947786, lng: -96.80991529391892},\r\n        zoom: 13\r\n      })\r\n\r\n      //Variable that holds instance of InfoWindow\r\n      let largeInfoWindow = new googleObject.InfoWindow()\r\n\r\n      let bounds = new googleObject.LatLngBounds()\r\n\r\n      //Icon marker colors\r\n      let defaultIcon = 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n      let mouseoverIcon = 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\r\n\r\n      //sets makers on map based on venue object data\r\n      venues.forEach(venue => {\r\n        let id = venue.id\r\n        let title = venue.name\r\n        let position = {\r\n          lat: venue.location.lat,\r\n          lng: venue.location.lng\r\n        }\r\n        let location = venue.location\r\n\r\n        let marker = new googleObject.Marker({\r\n          map: this.map,\r\n          position: position,\r\n          icon: defaultIcon,\r\n          title: title,\r\n          location: location,\r\n          animation: googleObject.Animation.DROP,\r\n          id: id\r\n        })\r\n\r\n        //resets boundaries of map based on marker location\r\n        bounds.extend(marker.position)\r\n\r\n        //Sets eventlisteners to open infowindow on click of marker\r\n        marker.addListener('click', () => {\r\n          this.setInfoWindow(marker, largeInfoWindow)\r\n        })\r\n\r\n        //Sets marker icon colors on mouseover action\r\n        marker.addListener('mouseover', () => {\r\n          marker.setIcon(mouseoverIcon)\r\n        })\r\n\r\n        //Sets marker icon colors on mouseout action\r\n        marker.addListener('mouseout', () => {\r\n          marker.setIcon(defaultIcon)\r\n        })\r\n      })\r\n\r\n      //sets map to fit size to new bounds\r\n      this.map.fitBounds(bounds)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='map'></div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NeighborhoodMap\r\n","import React, { Component } from 'react';\r\nimport NeighborhoodMap from './Components/NeighborhoodMap'\r\nimport { load_google_maps, loadMarkerPlaces } from './Util/MapLoader'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    loading: true\r\n  }\r\n\r\n  componentDidMount() {\r\n    let mapPromise = load_google_maps()\r\n    let markerPromise = loadMarkerPlaces();\r\n\r\n    Promise.all([\r\n      mapPromise,\r\n      markerPromise\r\n    ])\r\n    .then(response => {\r\n      console.log(response[1])\r\n      this.googleObject = response[0].maps\r\n      this.venues = response[1].response.venues\r\n      this.setState({\r\n        loading: false\r\n      })\r\n    })\r\n    .catch(error => {console.log(error)})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello World!</h1>\r\n        <NeighborhoodMap\r\n        loading={this.state.loading}\r\n        googleObject={this.googleObject}\r\n        venues={this.venues}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","//Loads the google maps api and returns it as an object\r\nexport function load_google_maps() {\r\n  return new Promise(function(resolve, reject) {\r\n    // define the global callback that will run when google maps is loaded\r\n    window.resolveGoogleMapsPromise = function() {\r\n      // resolve the google object\r\n      resolve(window.google);\r\n      // delete the global callback to tidy up since it is no longer needed\r\n      delete window.resolveGoogleMapsPromise;\r\n    }\r\n    // Now, Load the Google Maps API\r\n    const script = document.createElement(\"script\");\r\n    const API_KEY = 'AIzaSyAP4vpEbZ99EZkBmoTlvApp1wTIbDJtA-8';\r\n    script.src = `https://maps.googleapis.com/maps/api/js?libraries=places,geometry&key=${API_KEY}&callback=resolveGoogleMapsPromise`;\r\n    script.async = true;\r\n    document.body.appendChild(script);\r\n  });\r\n}\r\n\r\n//Loads default set of marker information to be used\r\nexport function loadMarkerPlaces() {\r\n  let searchQuery = 'restuarant'\r\n  let nearParam = 'Dallas, TX'\r\n  const clientId = 'ZWXMUFVA3FFI0ETOBLYUYUV0LM0DCHLXHYIKAAXKNYAVNFA3'\r\n  const clientSecrect = 'Y0VDEZ5GP0BKEACCGOIFCTP2ULKVLA3KQF42RKZZ5YQ5MVT5'\r\n\r\n  let apiRequest = `https://api.foursquare.com/v2/venues/search?client_id=${clientId}&client_secret=${clientSecrect}&v=20180323&limit=30&near=${nearParam}&query=${searchQuery}`\r\n\r\n  return fetch(apiRequest).then(response => {\r\n    return response.json()\r\n  }).catch(error => {console.log(error)})\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}