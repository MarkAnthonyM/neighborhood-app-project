{"version":3,"sources":["Components/header.js","Components/nav-menu.js","Components/LoadingMenu.js","Components/map.js","App.js","Util/MapLoader.js","serviceWorker.js","index.js"],"names":["Header","_this","this","react_default","a","createElement","className","tabIndex","onClick","props","toggleNavMenu","src","alt","Component","NavMenu","_this$props","filterMarkers","markers","query","setInfoWindow","largeInfoWindow","id","type","placeholder","value","onChange","event","target","map","marker","key","title","LoadApp","state","timeout","failed","loadingFailed","setState","window","clearTimeout","setTimeout","console","log","Map","role","aria-label","App","isLoading","filteredMarkers","toggle","infowindow","animatingMarker","googleObject","Object","assertThisInitialized","setContent","setAnimation","Animation","BOUNCE","addListener","venueDetail","loadVenueDetails","Promise","all","then","response","venueDetails","venue","StreetViewService","getPanoramaByLocation","position","data","status","StreetViewStatus","OK","nearStreetView","location","latLng","heading","geometry","spherical","computeHeading","concat","formattedAddress","rating","panoramaOptions","pov","pitch","StreetViewPanorama","document","getElementById","open","filterContainer","venueMarkers","forEach","toLowerCase","includes","setVisible","push","_this2","mapPromise","resolve","reject","resolveGoogleMapsPromise","google","script","async","body","appendChild","markerPromise","apiRequest","fetch","json","catch","error","loadMarkerPlaces","maps","venues","center","lat","lng","zoom","InfoWindow","bounds","LatLngBounds","defaultIcon","animatedMarker","name","Marker","icon","animation","DROP","extend","setIcon","fitBounds","apiLink","classList","header","LoadingMenu","nav_menu","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fd35785f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className='header'>\r\n        <h1 tabIndex='0' className='header-title'>Neighborhood Restaurant Map</h1>\r\n        <img tabIndex='0' onClick={() => { this.props.toggleNavMenu() }} className=\"hamburger-icon\" src=\"https://img.icons8.com/material-rounded/100/000000/menu.png\" alt='Navigation icon'></img>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\n\r\nclass NavMenu extends Component {\r\n  render() {\r\n    const { filterMarkers, markers, query, setInfoWindow, largeInfoWindow } = this.props\r\n\r\n    return (\r\n      <div id='nav' className='nav-bar nav-close'>\r\n        <h3 tabIndex='0'>Filter By Location</h3>\r\n        <input\r\n          className='filter-box'\r\n          type='text'\r\n          placeholder='Filter By Name'\r\n          value={query}\r\n          onChange={(event) => filterMarkers(event.target.value)}\r\n        />\r\n        <div className='list-container'>\r\n          <ul className='filter-list'>\r\n            {markers.map(marker => (\r\n              <li key={marker.id} className='filter-list-item'>\r\n                <button onClick={() => { setInfoWindow(marker, largeInfoWindow) }}>{marker.title}</button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavMenu;\r\n","import React, { Component } from 'react'\r\n\r\nclass LoadApp extends Component {\r\n  state = {\r\n    timeout: null,\r\n    failed: false\r\n  }\r\n\r\n  componentWillMount(){\r\n    window.clearTimeout(this.state.timeout)\r\n  }\r\n\r\n  componentDidMount() {\r\n    let timeout = window.setTimeout(this.loadingFailed, 1000)\r\n    console.log(timeout)\r\n    this.setState({\r\n      timeout\r\n    })\r\n  }\r\n\r\n  loadingFailed = () => {\r\n    this.setState({\r\n      failed: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        {this.state.failed ?\r\n           <div>\r\n            <h1>Error Loading Map</h1>\r\n            <p>There was an error loading map. Please try again</p>\r\n           </div> :\r\n           <h2>Content Loading...</h2>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoadApp\r\n","import React, { Component } from 'react'\r\n\r\nclass Map extends Component {\r\n  render() {\r\n    return (\r\n      <div role='application' aria-label='map' id=\"map\"></div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Map\r\n","import React, { Component } from 'react';\r\nimport { load_google_maps, loadMarkerPlaces } from './Util/MapLoader'\r\nimport Header from './Components/header'\r\nimport NavMenu from './Components/nav-menu'\r\nimport LoadApp from './Components/LoadingMenu'\r\nimport Map from './Components/map'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    query: '',\r\n    isLoading: true,\r\n    filteredMarkers: [],\r\n    toggle: false\r\n  }\r\n\r\n  componentWillMount() {\r\n    //stores promise returning utility functions\r\n    let mapPromise = load_google_maps()\r\n    let markerPromise = loadMarkerPlaces();\r\n\r\n    Promise.all([\r\n      mapPromise,\r\n      markerPromise\r\n    ])\r\n    .then(response => {\r\n      this.googleObject = response[0].maps\r\n      this.venues = response[1].response.venues\r\n\r\n      //loads google map api to class property\r\n      this.map = new this.googleObject.Map(document.getElementById('map'), {\r\n        center: {lat: 32.815747500947786, lng: -96.80991529391892},\r\n        zoom: 13\r\n      })\r\n\r\n      //Variable that holds instance of InfoWindow\r\n      this.largeInfoWindow = new this.googleObject.InfoWindow()\r\n\r\n      //bounding information\r\n      let bounds = new this.googleObject.LatLngBounds()\r\n\r\n      //Icon marker colors\r\n      let defaultIcon = 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n      let mouseoverIcon = 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\r\n\r\n      //container for various makers\r\n      this.venueMarkers = []\r\n\r\n      //property for currently animating marker\r\n      this.animatedMarker = null\r\n\r\n      //sets makers on map based on venue object data\r\n      this.venues.forEach(venue => {\r\n        let id = venue.id\r\n        let title = venue.name\r\n        let position = {\r\n          lat: venue.location.lat,\r\n          lng: venue.location.lng\r\n        }\r\n        let location = venue.location\r\n\r\n        let marker = new this.googleObject.Marker({\r\n          map: this.map,\r\n          position: position,\r\n          icon: defaultIcon,\r\n          title: title,\r\n          location: location,\r\n          animation: this.googleObject.Animation.DROP,\r\n          id: id\r\n        })\r\n\r\n        this.venueMarkers.push(marker)\r\n\r\n        //resets boundaries of map based on marker location\r\n        bounds.extend(marker.position)\r\n\r\n        //Sets eventlisteners to open infowindow on click of marker\r\n        marker.addListener('click', () => {\r\n          this.animatedMarker = marker\r\n          this.setInfoWindow(marker, this.largeInfoWindow, this.animatedMarker)\r\n        })\r\n\r\n        //Sets marker icon colors on mouseover action\r\n        marker.addListener('mouseover', () => {\r\n          marker.setIcon(mouseoverIcon)\r\n        })\r\n\r\n        //Sets marker icon colors on mouseout action\r\n        marker.addListener('mouseout', () => {\r\n          marker.setIcon(defaultIcon)\r\n        })\r\n      })\r\n\r\n      //sets map to fit size to new bounds\r\n      this.map.fitBounds(bounds)\r\n\r\n      //Changes loading state after async calls done and initializes filteredMarkers state\r\n      this.setState({\r\n        isLoading: false,\r\n        filteredMarkers: this.venueMarkers\r\n      })\r\n    })\r\n    .catch(error => {console.log(error)})\r\n  }\r\n\r\n  //returns promise object from foursquare api with restuarant details\r\n  loadVenueDetails(marker) {\r\n    const clientId = 'ZWXMUFVA3FFI0ETOBLYUYUV0LM0DCHLXHYIKAAXKNYAVNFA3'\r\n    const clientSecrect = 'Y0VDEZ5GP0BKEACCGOIFCTP2ULKVLA3KQF42RKZZ5YQ5MVT5'\r\n\r\n    let apiLink = `https://api.foursquare.com/v2/venues/${marker.id}?client_id=${clientId}&client_secret=${clientSecrect}&v=20181025`\r\n\r\n    return fetch(apiLink).then(response => {\r\n      return response.json()\r\n    }).catch(error => console.log(error))\r\n  }\r\n\r\n  //populates marker infowindow with varies details about venue\r\n  setInfoWindow = (marker, infowindow, animatingMarker) => {\r\n    const { googleObject } = this\r\n    //Checks maker for already opened infowindow\r\n    if (infowindow.marker !== marker) {\r\n      //Clear infowindow to setup for streetview\r\n      infowindow.setContent('')\r\n      infowindow.marker = marker\r\n      //checks for any currently animating markers\r\n      if (this.animatingMarker) {\r\n        this.animatingMarker.setAnimation(null)\r\n      }\r\n      this.animatingMarker = marker\r\n      marker.setAnimation(this.googleObject.Animation.BOUNCE)\r\n      infowindow.addListener('closeclick', () => {\r\n        infowindow.marker = null\r\n        marker.setAnimation(null)\r\n      })\r\n\r\n      let venueDetail = this.loadVenueDetails(marker)\r\n      Promise.all([\r\n        venueDetail\r\n      ]).then(response => {\r\n        this.venueDetails = response[0].response.venue\r\n      })\r\n\r\n      // venueDetail.then(response => {\r\n      //   console.log(response)\r\n      // })\r\n\r\n      let streetViewService = new googleObject.StreetViewService()\r\n      let radius = 50\r\n\r\n      //loads streetview into infowindow if applicable\r\n      function getStreetView(data, status) {\r\n        if (status === googleObject.StreetViewStatus.OK) {\r\n          let nearStreetView = data.location.latLng\r\n          let heading = googleObject.geometry.spherical.computeHeading(\r\n            nearStreetView, marker.position\r\n          )\r\n          infowindow.setContent(\r\n            `\r\n            <h2>${marker.title}</h2>\r\n            <div id='pano'></div>\r\n            <p>Address: ${marker.location.formattedAddress[0]}, ${marker.location.formattedAddress[1]}</p>\r\n            <p>Rating: ${venueDetail.rating}</p>\r\n            `\r\n          )\r\n          let panoramaOptions = {\r\n            position: nearStreetView,\r\n            pov: {\r\n              heading: heading,\r\n              pitch: 30\r\n            }\r\n          }\r\n          new googleObject.StreetViewPanorama(\r\n            document.getElementById('pano'), panoramaOptions\r\n          )\r\n        } else {\r\n          infowindow.setContent(`<div>${marker.title}<div><div>No Street View Found</div>`)\r\n        }\r\n      }\r\n\r\n      streetViewService.getPanoramaByLocation(marker.position, radius, getStreetView)\r\n\r\n      infowindow.open(this.map, marker)\r\n    }\r\n  }\r\n\r\n  //filters visible makers based string in query state\r\n  filterMarkers = (query) => {\r\n    this.filterContainer = []\r\n    this.venueMarkers.forEach(marker => {\r\n      if (marker.title.toLowerCase().includes(query.toLowerCase())) {\r\n        marker.setVisible(true)\r\n        this.filterContainer.push(marker)\r\n      } else {\r\n        marker.setVisible(false)\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      query: query,\r\n      filteredMarkers: this.filterContainer\r\n    })\r\n  }\r\n\r\n  //toggles side-bar\r\n  toggleNavMenu(){\r\n    const navMenu = document.getElementById('nav')\r\n    navMenu.classList.toggle('nav-open')\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header toggleNavMenu={this.toggleNavMenu}/>\r\n        <main>\r\n          {this.state.isLoading ? <LoadApp/> : <NavMenu\r\n            largeInfoWindow={this.largeInfoWindow}\r\n            query={this.state.query}\r\n            markers={this.state.filteredMarkers}\r\n            filterMarkers={this.filterMarkers}\r\n            setInfoWindow={this.setInfoWindow}\r\n          />}\r\n          <Map />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","//Loads the google maps api and returns it as an object\r\nexport function load_google_maps() {\r\n  return new Promise(function(resolve, reject) {\r\n    // define the global callback that will run when google maps is loaded\r\n    window.resolveGoogleMapsPromise = function() {\r\n      // resolve the google object\r\n      resolve(window.google);\r\n      // delete the global callback to tidy up since it is no longer needed\r\n      delete window.resolveGoogleMapsPromise;\r\n    }\r\n    // Now, Load the Google Maps API\r\n    const script = document.createElement(\"script\");\r\n    const API_KEY = 'AIzaSyAP4vpEbZ99EZkBmoTlvApp1wTIbDJtA-8';\r\n    script.src = `https://maps.googleapis.com/maps/api/js?libraries=places,geometry&key=${API_KEY}&callback=resolveGoogleMapsPromise`;\r\n    script.async = true;\r\n    document.body.appendChild(script);\r\n  });\r\n}\r\n\r\n//Loads default set of venues to be used\r\nexport function loadMarkerPlaces() {\r\n  let searchQuery = 'restuarant'\r\n  let nearParam = 'Dallas, TX'\r\n  const clientId = 'ZWXMUFVA3FFI0ETOBLYUYUV0LM0DCHLXHYIKAAXKNYAVNFA3'\r\n  const clientSecrect = 'Y0VDEZ5GP0BKEACCGOIFCTP2ULKVLA3KQF42RKZZ5YQ5MVT5'\r\n\r\n  let apiRequest = `https://api.foursquare.com/v2/venues/search?client_id=${clientId}&client_secret=${clientSecrect}&v=20180323&limit=30&near=${nearParam}&query=${searchQuery}`\r\n\r\n  return fetch(apiRequest).then(response => {\r\n    return response.json()\r\n  }).catch(error => {console.log(error)})\r\n}\r\n\r\n//loads various details about venues\r\nexport function loadVenueDetails(marker) {\r\n  const clientId = 'ZWXMUFVA3FFI0ETOBLYUYUV0LM0DCHLXHYIKAAXKNYAVNFA3'\r\n  const clientSecrect = 'Y0VDEZ5GP0BKEACCGOIFCTP2ULKVLA3KQF42RKZZ5YQ5MVT5'\r\n\r\n  let apiLink = `https://api.foursquare.com/v2/venues/${marker.id}?client_id=${clientId}&client_secret=${clientSecrect}&v=20181025`\r\n\r\n  return fetch(apiLink).then(response => {\r\n    return response.json()\r\n  }).catch(error => console.log(error))\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}