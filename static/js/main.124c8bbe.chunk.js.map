{"version":3,"sources":["Components/NeighborhoodMap.js","App.js","Util/MapLoader.js","serviceWorker.js","index.js"],"names":["NeighborhoodMap","this","props","loading","console","log","map","googleObject","Map","document","getElementById","center","lat","lng","zoom","marker","Marker","position","title","react_default","a","createElement","id","Component","App","state","_this2","mapPromise","Promise","resolve","reject","window","resolveGoogleMapsPromise","google","script","src","concat","async","body","appendChild","markerPromise","apiRequest","fetch","then","response","catch","error","loadMarkerPlaces","all","maps","setState","className","Components_NeighborhoodMap","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiCeA,+LA7BPC,KAAKC,MAAMC,QACbC,QAAQC,IAAI,6BAEZJ,KAAKK,IAAM,IAAIL,KAAKC,MAAMK,aAAaC,IAAIC,SAASC,eAAe,OAAQ,CACzEC,OAAQ,CAACC,IAAK,WAAYC,KAAM,YAChCC,KAAM,KAMRb,KAAKc,OAAS,IAAId,KAAKC,MAAMK,aAAaS,OAAO,CAC/CC,SAAU,CACRL,IAAK,UACLC,KAAM,YAERP,IAAKL,KAAKK,IACVY,MAAO,oDAMX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eA1BgBC,uBCwCfC,6MAnCbC,MAAQ,CACNtB,SAAS,sFAGS,IAAAuB,EAAAzB,KACd0B,ECVC,IAAIC,QAAQ,SAASC,EAASC,GAEnCC,OAAOC,yBAA2B,WAEhCH,EAAQE,OAAOE,eAERF,OAAOC,0BAGhB,IAAME,EAASzB,SAASY,cAAc,UAEtCa,EAAOC,IAAP,gEAAAC,OADgB,0CAChB,sCACAF,EAAOG,OAAQ,EACf5B,SAAS6B,KAAKC,YAAYL,KDFtBM,ECOD,WACL,IAKIC,EAAU,yDAAAL,OAHG,mDAGH,mBAAAA,OAFQ,mDAER,8BAAAA,OAJE,aAIF,WAAAA,OALI,cAOlB,OAAOM,MAAMD,GAAYE,KAAK,SAAAC,GAC5BxC,QAAQC,IAAIuC,KACXC,MAAM,SAAAC,GAAU1C,QAAQC,IAAIyC,KDjBTC,GAEpBnB,QAAQoB,IAAI,CACVrB,EACAa,IAEDG,KAAK,SAAAC,GACJxC,QAAQC,IAAIuC,GACZlB,EAAKnB,aAAeqC,EAAS,GAAGK,KAChCvB,EAAKwB,SAAS,CACZ/C,SAAS,MAGZ0C,MAAM,SAAAC,GAAU1C,QAAQC,IAAIyC,sCAI7B,OACE3B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAC+B,EAAD,CACAjD,QAASF,KAAKwB,MAAMtB,QACpBI,aAAcN,KAAKM,uBA9BTgB,aEOE8B,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASlD,SAASC,eAAe,SD2H3C,kBAAmBkD,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.124c8bbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass NeighborhoodMap extends Component {\r\n  componentDidUpdate() {\r\n    if (this.props.loading) {\r\n      console.log('content is still loading')\r\n    } else {\r\n      this.map = new this.props.googleObject.Map(document.getElementById('map'), {\r\n        center: {lat: 40.7413549, lng: -73.9980244},\r\n        zoom: 13\r\n      })\r\n      // let tribeca = {\r\n      //   lat: 40.719526,\r\n      //   lng: -74.0089934\r\n      // }\r\n      this.marker = new this.props.googleObject.Marker({\r\n        position: {\r\n          lat: 40.719526,\r\n          lng: -74.0089934\r\n        },\r\n        map: this.map,\r\n        title: 'First Marker!'\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='map'></div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NeighborhoodMap\r\n","import React, { Component } from 'react';\r\nimport NeighborhoodMap from './Components/NeighborhoodMap'\r\nimport { load_google_maps, loadMarkerPlaces } from './Util/MapLoader'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    loading: true\r\n  }\r\n\r\n  componentDidMount() {\r\n    let mapPromise = load_google_maps()\r\n    let markerPromise = loadMarkerPlaces();\r\n\r\n    Promise.all([\r\n      mapPromise,\r\n      markerPromise\r\n    ])\r\n    .then(response => {\r\n      console.log(response)\r\n      this.googleObject = response[0].maps\r\n      this.setState({\r\n        loading: false\r\n      })\r\n    })\r\n    .catch(error => {console.log(error)})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello World!</h1>\r\n        <NeighborhoodMap\r\n        loading={this.state.loading}\r\n        googleObject={this.googleObject}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","//Loads the google maps api and returns it as an object\r\nexport function load_google_maps() {\r\n  return new Promise(function(resolve, reject) {\r\n    // define the global callback that will run when google maps is loaded\r\n    window.resolveGoogleMapsPromise = function() {\r\n      // resolve the google object\r\n      resolve(window.google);\r\n      // delete the global callback to tidy up since it is no longer needed\r\n      delete window.resolveGoogleMapsPromise;\r\n    }\r\n    // Now, Load the Google Maps API\r\n    const script = document.createElement(\"script\");\r\n    const API_KEY = 'AIzaSyAP4vpEbZ99EZkBmoTlvApp1wTIbDJtA-8';\r\n    script.src = `https://maps.googleapis.com/maps/api/js?libraries=places&key=${API_KEY}&callback=resolveGoogleMapsPromise`;\r\n    script.async = true;\r\n    document.body.appendChild(script);\r\n  });\r\n}\r\n\r\n//Loads default set of marker information to be used\r\nexport function loadMarkerPlaces() {\r\n  let searchQuery = 'restuarant'\r\n  let nearParam = 'Dallas, TX'\r\n  const clientId = 'ZWXMUFVA3FFI0ETOBLYUYUV0LM0DCHLXHYIKAAXKNYAVNFA3'\r\n  const clientSecrect = 'Y0VDEZ5GP0BKEACCGOIFCTP2ULKVLA3KQF42RKZZ5YQ5MVT5'\r\n\r\n  let apiRequest = `https://api.foursquare.com/v2/venues/search?client_id=${clientId}&client_secret=${clientSecrect}&v=20180323&limit=30&near=${nearParam}&query=${searchQuery}`\r\n\r\n  return fetch(apiRequest).then(response => {\r\n    console.log(response)\r\n  }).catch(error => {console.log(error)})\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}