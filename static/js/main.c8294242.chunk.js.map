{"version":3,"sources":["Components/NeighborhoodMap.js","App.js","Util/MapLoader.js","serviceWorker.js","index.js"],"names":["NeighborhoodMap","this","props","loading","console","log","map","googleObject","Map","document","getElementById","center","lat","lng","zoom","react_default","a","createElement","id","Component","App","state","_this2","mapPromise","Promise","resolve","reject","window","resolveGoogleMapsPromise","google","script","src","concat","async","body","appendChild","all","then","response","maps","setState","catch","error","_this3","className","Route","exact","path","render","Components_NeighborhoodMap","Boolean","location","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAqBeA,+LAjBPC,KAAKC,MAAMC,QACbC,QAAQC,IAAI,4BAEZJ,KAAKK,IAAM,IAAIL,KAAKC,MAAMK,aAAaC,IAAIC,SAASC,eAAe,OAAQ,CACzEC,OAAQ,CAACC,IAAK,WAAYC,KAAM,YAChCC,KAAM,sCAMV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eAdgBC,uBCwCfC,6MAlCbC,MAAQ,CACNlB,SAAS,uFAGU,IAAAmB,EAAArB,KACfsB,ECZC,IAAIC,QAAQ,SAASC,EAASC,GAEnCC,OAAOC,yBAA2B,WAEhCH,EAAQE,OAAOE,eAERF,OAAOC,0BAGhB,IAAME,EAASrB,SAASQ,cAAc,UAEtCa,EAAOC,IAAP,gEAAAC,OADgB,0CAChB,sCACAF,EAAOG,OAAQ,EACfxB,SAASyB,KAAKC,YAAYL,KDC1BN,QAAQY,IAAI,CACVb,IAEDc,KAAK,SAAAC,GACJhB,EAAKf,aAAe+B,EAAS,GAAGC,KAChCjB,EAAKkB,SAAS,CACZrC,SAAS,MAGZsC,MAAM,SAAAC,GAAUtC,QAAQC,IAAIqC,sCAGtB,IAAAC,EAAA1C,KACP,OACEc,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC5BjC,EAAAC,EAAAC,cAACgC,EAAD,CACA9C,QAASwC,EAAKtB,MAAMlB,QACpBI,aAAcoC,EAAKpC,0BA5BXY,aEME+B,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCXNC,IAASN,OAAOjC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAeC,SAAUC,0CAAwB1C,EAAAC,EAAAC,cAACyC,EAAD,OAAyBjD,SAASC,eAAe,SD0H5G,kBAAmBiD,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.c8294242.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass NeighborhoodMap extends Component {\r\n  componentDidUpdate() {\r\n    if (this.props.loading) {\r\n      console.log('content is still loading')\r\n    } else {\r\n      this.map = new this.props.googleObject.Map(document.getElementById('map'), {\r\n        center: {lat: 40.7413549, lng: -73.9980244},\r\n        zoom: 13\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='map'></div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NeighborhoodMap\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom'\r\nimport NeighborhoodMap from './Components/NeighborhoodMap'\r\nimport { load_google_maps } from './Util/MapLoader'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    loading: true\r\n  }\r\n\r\n  componentWillMount() {\r\n    let mapPromise = load_google_maps()\r\n\r\n    Promise.all([\r\n      mapPromise\r\n    ])\r\n    .then(response => {\r\n      this.googleObject = response[0].maps\r\n      this.setState({\r\n        loading: false\r\n      })\r\n    })\r\n    .catch(error => {console.log(error)})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello World!</h1>\r\n        <Route exact path='/' render={() => (\r\n          <NeighborhoodMap\r\n          loading={this.state.loading}\r\n          googleObject={this.googleObject}\r\n          />\r\n        )}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export function load_google_maps() {\r\n  return new Promise(function(resolve, reject) {\r\n    // define the global callback that will run when google maps is loaded\r\n    window.resolveGoogleMapsPromise = function() {\r\n      // resolve the google object\r\n      resolve(window.google);\r\n      // delete the global callback to tidy up since it is no longer needed\r\n      delete window.resolveGoogleMapsPromise;\r\n    }\r\n    // Now, Load the Google Maps API\r\n    const script = document.createElement(\"script\");\r\n    const API_KEY = 'AIzaSyAP4vpEbZ99EZkBmoTlvApp1wTIbDJtA-8';\r\n    script.src = `https://maps.googleapis.com/maps/api/js?libraries=places&key=${API_KEY}&callback=resolveGoogleMapsPromise`;\r\n    script.async = true;\r\n    document.body.appendChild(script);\r\n  });\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}